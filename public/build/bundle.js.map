{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/AnimalFriends.svelte","../../src/WiseTree.svelte","../../src/QuestionSparklingForest.svelte","../../src/CandyLand.svelte","../../src/RainbowRiver.svelte","../../src/QuestionCloudKingdom.svelte","../../src/AncientTexts.svelte","../../src/TalkingBooks.svelte","../../src/QuestionHiddenLibrary.svelte","../../src/Question0.svelte","../../src/Location.svelte","../../src/BookDetails.svelte","../../src/WinnieThePoohChoice.svelte","../../src/AnimalTalesChoice.svelte","../../src/AnimalsPath.svelte","../../src/NurseryRhymePath.svelte","../../src/Question2a.svelte","../../src/FrenchFairyTalesChoice.svelte","../../src/GrimmFairyTales.svelte","../../src/HansChristianAndersen.svelte","../../src/OtherStoriesChoice.svelte","../../src/EnchantedForestChoice.svelte","../../src/ClassicStories.svelte","../../src/DisneyFavorites.svelte","../../src/BeyondTheRainbowChoice.svelte","../../src/Question2b.svelte","../../src/Question2c.svelte","../../src/Question1.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<script>\n    import Question1 from './Question1.svelte'; // Import Question0 component (optional for future use)\n\n    let chosenAnswer = \"\"; // Track chosen answer for reference (optional)\n    let goNextButton = false;\n    let choiceMade = false;\n\n    const handleAnswerClick = (answer) => {\n        chosenAnswer = answer; // Store chosen answer (optional)\n        choiceMade = true;\n    };\n\n    const goNextButton1 = () => {\n        // No need to emit an event in this case\n        goNextButton = true;\n    };\n</script>\n    {#if !goNextButton}\n    <h2>Who would you most like to befriend in the forest?</h2>\n\n    <div>\n        <button class:selected={chosenAnswer === \"Wise Owl\"} on:click={() => handleAnswerClick(\"Wise Owl\")}>The wise old owl with endless stories</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Playful Squirrel\"} on:click={() => handleAnswerClick(\"Playful Squirrel\")}>The playful squirrel who knows all the secret hiding places</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Strong Bear\"} on:click={() => handleAnswerClick(\"Strong Bear\")}>The strong bear who can teach you to defend yourself</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Singing Bird\"} on:click={() => handleAnswerClick(\"Singing Bird\")}>The singing bird who knows the language of the forest</button>\n    </div>\n  \n    \n    {#if choiceMade && !goNextButton}\n        <button class=\"next\"  on:click={goNextButton1}>Next</button>\n    {/if}\n\n\n{/if}\n\n{#if goNextButton}\n    <Question1 />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import Question1 from './Question1.svelte';\n    \n    let chosenAnswer = \"\"; // Track chosen answer for reference (optional)\n    let goNextButton = false;\n    let choiceMade = false;\n\n    const handleAnswerClick = (answer) => {\n        chosenAnswer = answer; // Store chosen answer (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        // No need to emit an event in this case\n        goNextButton = true;\n    };\n</script>\n\n{#if !goNextButton}\n    <h2>The wise tree asks...</h2>\n\n    <div>\n        <button class:selected={chosenAnswer === \"Strength\"} on:click={() => handleAnswerClick(\"Strength\")}>The path to become stronger</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Knowledge\"} on:click={() => handleAnswerClick(\"Knowledge\")}>Secrets of the hidden world</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Friendship\"} on:click={() => handleAnswerClick(\"Friendship\")}>Guidance on finding true friends</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Destiny\"} on:click={() => handleAnswerClick(\"Destiny\")}>Understanding my purpose</button>\n    </div>\n\n    {#if choiceMade && !goNextButton}\n    <button class=\"next\" on:click={goToNextQuestion}>Next</button>\n    {/if}\n{/if}\n\n\n\n{#if goNextButton}\n    <Question1 />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import AnimalFriends from './AnimalFriends.svelte'; // Import component for animal friends path\n    import WiseTree from './WiseTree.svelte'; // Import component for wise tree path\n\n    let animalFriendsSelected = false;\n    let wiseTreeSelected = false;\n    let showNextButton = false; // Flag to control \"Next\" button visibility\n    let goNextButton = false;\n\n    const handleAnimalFriendsClick = () => {\n        animalFriendsSelected = true;\n        wiseTreeSelected = false;\n        showNextButton = true;\n    };\n\n    const handleWiseTreeClick = () => {\n        animalFriendsSelected = false;\n        wiseTreeSelected = true;\n        showNextButton = true;\n    };\n\n    const goToNextQuestion = () => {\n        // Emit event based on selected path (\"animalFriends\" or \"wiseTree\")\n        goNextButton = true;\n    };\n</script>\n\n    {#if !goNextButton}\n    <h2>What would you love to do most in the sparkling forest?</h2>\n\n    <div>\n        <button class:selected={animalFriendsSelected} on:click={handleAnimalFriendsClick}>\n            Make friends with the talking animals! \n        </button>\n    </div>\n    <div>\n        <button class:selected={wiseTreeSelected} on:click={handleWiseTreeClick}>\n            Seek advice from the wise old tree. \n        </button>\n    </div>\n    {/if}\n\n    {#if showNextButton && !goNextButton}\n    <button class=\"next\" disabled={!animalFriendsSelected && !wiseTreeSelected} on:click={goToNextQuestion}>Next</button>\n    {/if}\n\n    {#if animalFriendsSelected && goNextButton}\n        <AnimalFriends />\n    {:else if wiseTreeSelected && goNextButton}\n        <WiseTree />\n\n    {/if}\n\n<style>\n    /* Same styles as provided previously */\n    button {\n     font-size: 16px;\n     padding: 10px 20px;\n     border: 5px solid brown;\n     border-radius: 10px;\n     margin: 5px;\n     cursor: pointer;\n     width: 220px;\n     background-color: darkgreen;\n     color: white;\n   }\n \n   button.selected {\n     background-color: lightgreen;\n   }\n \n   button.next {\n     background-color: lightgreen;\n     width: auto;\n   }\n</style>\n","<script>\n    import Question1 from './Question1.svelte'; // Import Question1 component\n\n    let chosenAnswer = \"\"; // Track chosen answer for reference (optional)\n    let goNextButton = false;\n    let showNextButton = false;\n\n    const handleAnswerClick = (answer) => {\n        chosenAnswer = answer; // Store chosen answer (optional)\n        showNextButton = true;\n    };\n\n    const goToQuestion1 = () => {\n        // No need to emit an event in this case\n        goNextButton = true;\n    };\n</script>\n\n{#if !goNextButton}\n<h2>What sweet treat would you like to try first?</h2>\n\n<div>\n    <button class:selected={chosenAnswer === \"Chocolate River\"} on:click={() => handleAnswerClick(\"Chocolate River\")}>Dive into a river of melted chocolate!</button>\n</div>\n<div>\n    <button class:selected={chosenAnswer === \"Gummy Bear Forest\"} on:click={() => handleAnswerClick(\"Gummy Bear Forest\")}>Explore a forest made entirely of gummy bears!</button>\n</div>\n<div>\n    <button class:selected={chosenAnswer === \"Lollipop Lane\"} on:click={() => handleAnswerClick(\"Lollipop Lane\")}>Stroll down a lane lined with giant lollipops!</button>\n</div>\n<div>\n    <button class:selected={chosenAnswer === \"Marshmallow Mountain\"} on:click={() => handleAnswerClick(\"Marshmallow Mountain\")}>Climb a mountain made of fluffy marshmallows!</button>\n</div>\n\n{#if showNextButton}\n<button class=\"next\" on:click={goToQuestion1}>Next</button>\n{/if}\n{/if} \n\n{#if goNextButton}\n    <Question1 />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n\n","<script>\n    import Question1 from './Question1.svelte'; // Import Question1 component\n\n    let chosenAnswer = \"\"; // Track chosen answer for reference (optional)\n    let goNextButton = false;\n    let choiceMade = false;\n\n    const handleAnswerClick = (answer) => {\n        chosenAnswer = answer; // Store chosen answer (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        // No need to emit an event in this case\n        goNextButton = true;\n    };\n</script>\n\n{#if !goNextButton}\n\n    <h2>What adventure would you like to try first?</h2>\n\n\n    <div>\n        <button class:selected={chosenAnswer === \"Ride a Rainbow Unicorn\"} on:click={() => handleAnswerClick(\"Ride a Rainbow Unicorn\")}>Ride a magical rainbow unicorn down the river!</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Swim with Colorful Fish\"} on:click={() => handleAnswerClick(\"Swim with Colorful Fish\")}>Swim with schools of dazzling, colorful fish!</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Collect Sparkling Wishes\"} on:click={() => handleAnswerClick(\"Collect Sparkling Wishes\")}>Collect sparkling wishes floating on water bubbles!</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Visit the Cloud Castle\"} on:click={() => handleAnswerClick(\"Visit the Cloud Castle\")}>Dock at a cloud castle for a magical feast!</button>\n    </div>\n\n    {#if choiceMade && !goNextButton}\n    <button class=\"next\" on:click={goToNextQuestion}>Next</button>\n    {/if}\n\n{/if}\n\n{#if goNextButton}\n    <Question1 />\n{/if}\n\n\n<style>\n    /* Same styles as provided previously */\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import CandyLand from './CandyLand.svelte'; // Import CandyLand component\n    import RainbowRiver from './RainbowRiver.svelte'; // Import RainbowRiver component\n\n    let chosenAnswer = \"\"; // Track chosen answer for reference (optional)\n    let goNextButton = false;\n    let choiceMade = false;\n\n    const handleAnswerClick = (answer) => {\n        chosenAnswer = answer; // Store chosen answer (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        // Implement logic based on chosen answer\n        goNextButton = true;\n    };\n</script>\n\n{#if !goNextButton}\n<h2>You enter Cloud Kingdom! How would you like to spend your time here?</h2>\n\n\n<div>\n    <button class:selected={chosenAnswer === \"CandyLand\"} on:click={() => handleAnswerClick(\"CandyLand\")}>Explore the mountains of candy and sweets!</button>\n</div>\n<div>\n    <button class:selected={chosenAnswer === \"RainbowRiver\"} on:click={() => handleAnswerClick(\"RainbowRiver\")}>Take a ride on the rainbow river that flows through the clouds!</button>\n</div>\n\n{#if choiceMade}\n<button class=\"next\" on:click={goToNextQuestion}>Next</button>\n{/if}\n{/if}\n\n{#if goNextButton}\n    {#if chosenAnswer === \"RainbowRiver\"}\n        <RainbowRiver />\n    {/if}\n    {#if chosenAnswer === \"CandyLand\"}\n        <CandyLand />\n    {/if}\n {/if}\n\n\n<style>\n    /* Same styles as provided previously */\n    button {\n     font-size: 16px;\n     padding: 10px 20px;\n     border: 5px solid brown;\n     border-radius: 10px;\n     margin: 5px;\n     cursor: pointer;\n     width: 220px;\n     background-color: darkgreen;\n     color: white;\n   }\n \n   button.selected {\n     background-color: lightgreen;\n   }\n \n   button.next {\n     background-color: lightgreen;\n     width: auto;\n   }\n</style>\n\n","<script>\n    import Question1 from './Question1.svelte'; // Import Question1 component\n\n    let chosenAnswer = \"\"; // Track chosen answer for reference (optional)\n    let goNextButton = false;\n    let showNextButton = false;\n\n    const handleAnswerClick = (answer) => {\n        chosenAnswer = answer; // Store chosen answer (optional)\n        showNextButton = true;\n\n    };\n\n    const goToQuestion1 = () => {\n        // No need to emit an event in this case\n        goNextButton = true;\n    };\n</script>\n{#if !goNextButton}\n\n    <h2>Which subject would you like to learn more about?</h2>\n\n    <div>\n        <button class:selected={chosenAnswer === \"Forgotten Magic\"} on:click={() => handleAnswerClick(\"Forgotten Magic\")}>Unearth the secrets of lost magical traditions!</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Ancient History\"} on:click={() => handleAnswerClick(\"Ancient History\")}>Delve into the forgotten stories of civilizations past!</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Mythical Creatures\"} on:click={() => handleAnswerClick(\"Mythical Creatures\")}>Discover the legends surrounding fantastical beings!</button>\n    </div>\n\n    {#if showNextButton}\n    <button class=\"next\" on:click={goToQuestion1}>Next</button>\n    {/if}\n{/if}\n\n\n\n{#if goNextButton}\n    <Question1 />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import Question1 from './Question1.svelte'; // Import Question1 component\n\n    let chosenAnswer = \"\"; // Track chosen answer for reference (optional)\n    let goNextButton = false;\n    let choiceMade = false;\n\n    const handleAnswerClick = (answer) => {\n        chosenAnswer = answer; // Store chosen answer (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        // No need to emit an event in this case\n        goNextButton = true;\n    };\n</script>\n\n{#if !goNextButton}\n    <h2>Which story would you like to hear first?</h2>\n\n    <div>\n        <button class:selected={chosenAnswer === \"The Lost City\"} on:click={() => handleAnswerClick(\"The Lost City\")}>A tale of a hidden city shrouded in mystery!</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"The Talking Beasts\"} on:click={() => handleAnswerClick(\"The Talking Beasts\")}>A fable of animals who speak the language of the forest!</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"The Bravest Hero\"} on:click={() => handleAnswerClick(\"The Bravest Hero\")}>A legend of a hero who faced unimaginable dangers!</button>\n    </div>\n\n    {#if choiceMade && !goNextButton}\n    <button class=\"next\" on:click={goToNextQuestion}>Next</button>\n    {/if}\n{/if}\n\n{#if goNextButton}\n    <Question1 />\n{/if}\n\n\n<style>\n    /* Same styles as provided previously */\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import AncientTexts from './AncientTexts.svelte'; // Import AncientTexts component\n    import TalkingBooks from './TalkingBooks.svelte'; // Import TalkingBooks component\n\n    let chosenAnswer = \"\"; // Track chosen answer for reference (optional)\n    let goNextButton = false;\n    let choiceMade = false;\n\n    const handleAnswerClick = (answer) => {\n        chosenAnswer = answer; // Store chosen answer (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        // Implement logic based on chosen answer\n        goNextButton = true;\n    };\n</script>\n    {#if !goNextButton}\n    <h2>How would you like to explore the library?</h2>\n\n    <div>\n        <button class:selected={chosenAnswer === \"Ancient Texts\"} on:click={() => handleAnswerClick(\"Ancient Texts\")}>Browse the ancient texts filled with forgotten knowledge!</button>\n    </div>\n    <div>\n        <button class:selected={chosenAnswer === \"Talking Books\"} on:click={() => handleAnswerClick(\"Talking Books\")}>Listen to the talking books whisper their secrets!</button>\n    </div>\n\n    {#if choiceMade && !goNextButton}\n    <button class=\"next\" on:click={goToNextQuestion}>Next</button>\n    {/if}\n    {/if}\n\n{#if goNextButton}\n    {#if chosenAnswer === \"Ancient Texts\"}\n        <AncientTexts />\n    {:else if chosenAnswer === \"Talking Books\"}\n        <TalkingBooks />\n    {/if}\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import QuestionSparklingForest from './QuestionSparklingForest.svelte';\n    import QuestionCloudKingdom from './QuestionCloudKingdom.svelte';\n    import QuestionHiddenLibrary from './QuestionHiddenLibrary.svelte'; // Add component for the third option\n\n    let forestSelected = false;\n    let kingdomSelected = false;\n    let librarySelected = false;\n    let showNextButton = false;\n    let goNextButton = false;\n\n    const handleForestSelect = () => {\n        forestSelected = true;\n        kingdomSelected = false;\n        librarySelected = false;\n        showNextButton = true;\n    };\n\n    const handleKingdomSelect = () => {\n        forestSelected = false;\n        kingdomSelected = true;\n        librarySelected = false;\n        showNextButton = true;\n    };\n\n    const handleLibrarySelect = () => {\n        forestSelected = false;\n        kingdomSelected = false;\n        librarySelected = true;\n        showNextButton = true;\n    };\n\n    const goToNextQuestion = () => {\n        // Emit event with details on the chosen path (\"forest\", \"kingdom\", or \"library\")\n        goNextButton = true;\n    };\n</script>\n\n{#if !goNextButton}\n<h2>What magical place would you explore?</h2>\n<div>\n    <button class:selected={forestSelected} on:click={handleForestSelect}>A sparkling forest with talking animals ✨</button>\n</div>\n<div>\n    <button class:selected={kingdomSelected} on:click={handleKingdomSelect}>A cloud kingdom filled with candy rain ☁️</button>\n</div>\n<div>\n    <button class:selected={librarySelected} on:click={handleLibrarySelect}>A hidden library with endless magical books 📖</button>\n</div>\n{/if}\n\n{#if showNextButton && !goNextButton}\n<button class=\"next\"on:click={goToNextQuestion}>Next</button>\n{/if}\n\n{#if forestSelected && goNextButton}\n    <QuestionSparklingForest />\n{:else if kingdomSelected && goNextButton}\n    <QuestionCloudKingdom />\n{:else if librarySelected && goNextButton}\n    <QuestionHiddenLibrary />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    button {\n     font-size: 16px;\n     padding: 10px 20px;\n     border: 5px solid brown;\n     border-radius: 10px;\n     margin: 5px;\n     cursor: pointer;\n     width: 220px;\n     background-color: darkgreen;\n     color: white;\n   }\n \n   button.selected {\n     background-color: lightgreen;\n   }\n \n   button.next {\n     background-color: lightgreen;\n     width: auto;\n   }\n</style>\n","<script>\n    export let bookTitle;\n    export let location;\n    let click = true; \n    import Question0 from './Question0.svelte'; \n\n    function handleClick() {\n        click = false;\n    }\n</script>\n\n{#if click}\n<h2>{bookTitle}</h2>\n<p>Location: {location}</p>\n{#if location}\n    {#if location === 'Clock Tower'}\n        <p>Look to the right to find the book you seek!</p>\n        <div class=\"arrow-right\">\n            <img src='./arrow.png' alt=\"Right Arrow\" class=\"arrow-img\">\n        </div>\n    {:else if location === 'Book Cart'}\n        <p>Look down and unearth the book you seek!</p>\n        <div class=\"arrow-down\">\n            <img src='./arrow.png' alt=\"Down Arrow\" class=\"arrow-img\">\n        </div>\n    {:else if location === 'Wooden Crates'}\n        <p>Cast your gaze to the left and discover the book you seek!</p>\n        <div class=\"arrow-left\">\n            <img src='./arrow.png' alt=\"Left Arrow\" class=\"arrow-img\">\n        </div>\n    {:else}\n        <p>No specific instruction available.</p>\n    {/if}\n    <button on:click={handleClick}>Take Quiz Again!</button>\n{/if}\n{:else}\n    <Question0 />\n{/if}\n\n<style>\n    h2 {\n        margin-top: 0px;\n        font-size: 20px;\n        margin-bottom: 10px;\n    }\n\n    p {\n        font-size: 20px;\n        margin-bottom: -15px;\n    }\n\n    .arrow-right,\n    .arrow-down,\n    .arrow-left {\n        width: 200px;  /* Increased arrow size */\n        height: 200px;\n        position: relative;\n        display: inline-block;\n        margin-top: 30px;\n    }\n\n    .arrow-img {\n        width: 100%;\n        height: 100%;\n        transform-origin: center;\n        animation: spin 1s linear 3; /* Spin animation limited to 3 iterations */\n    }\n\n    @keyframes spin {\n        0% {\n            transform: rotate(0deg);\n        }\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n\n    .arrow-right {\n        transform: rotate(-180deg); /* Rotate left arrow for right position */\n    }\n\n    .arrow-down {\n        transform: rotate(-90deg); /* Rotate left arrow for down position */\n    }\n\n    .arrow-left {\n        transform: rotate(0deg); /* No change needed for left arrow */\n    }\n    button {\n        font-size: 25px;\n        padding: 10px 20px;\n        width: 220px; /* Set width to auto */\n        background-color: darkgreen;\n        color: white;\n        border: 4px solid #8B4513; /* Set dark brown border */\n        border-radius: 10px;\n        cursor: pointer;\n    }\n\n    button:hover {\n        background-color: green;\n    }\n</style>","<!-- BookDetails.svelte -->\n<script>\n  import { onMount } from 'svelte';\n  import Location from './Location.svelte';\n  let click = true;\n\n  export let bookTitle;\n\n  let bookInfo = null;\n  let locationInfo = null;\n\n  async function fetchBookDetails(title) {\n    try { \n      //const response = await fetch(`http://localhost:3000/search?title=${encodeURIComponent(title)}`);\n      const response = await fetch(`https://book-server-n6xk.onrender.com/search?title=${encodeURIComponent(title)}`);\n      if (response.ok) {\n        bookInfo = await response.json();\n      } else {\n        console.error('Failed to fetch book details:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching book details:', error);\n    }\n  }\n\n  async function fetchLocation(title) {\n    try {\n      const response = await fetch(`https://book-server-n6xk.onrender.com/book-location/${encodeURIComponent(title)}`);\n      if (response.ok) {\n        locationInfo = await response.json();\n      } else {\n        console.error('Failed to fetch location:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching location:', error);\n    }\n  }\n\n  // Fetch book details when the component is mounted\n  onMount(async () => {\n    await fetchBookDetails(bookTitle);\n  });\n\n  async function handleFindMe() {\n    await fetchLocation(bookTitle);\n  }\n</script>\n\n{#if locationInfo}\n  <Location bookTitle={bookTitle} location={locationInfo.location} />\n{:else}\n  {#if bookInfo}\n    <h2>{bookInfo.Title}</h2>\n    {#if bookInfo.Author}\n      <p>Author: {bookInfo.Author}</p>\n    {/if}\n    {#if bookInfo['Edition Date']}\n      <p>Publication Date: {bookInfo['Edition Date']}</p>\n    {/if}\n    {#if bookInfo.Publisher}\n      <p>Publisher: {bookInfo.Publisher}</p>\n    {/if}\n    {#if bookInfo.Description}\n      <p class=\"description\">Description: {bookInfo.Description}</p>\n    {/if}\n    <button on:click={handleFindMe}>Find Me!</button>\n  {/if}\n{/if}\n\n<style>\n  h2 {\n    margin-top: 0px;\n    font-size: 25px;\n    margin-bottom: 10px;\n  }\n\n  p {\n    font-size: 18px;\n    margin-bottom: -15px;\n  }\n\n  .description {\n    margin-top: 30px;\n    font-size: 15px;\n    margin-bottom: 10px;\n  }\n\n  button {\n    margin-top: 50px;\n    font-size: 18px;\n    padding: 8px 16px;\n    background-color: darkgreen;\n    color: white;\n    border: none;\n    margin-top: 5px;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n\n  button:hover {\n    background-color: green;\n  }\n\n</style>","<script>\n    import BookDetails from './BookDetails.svelte'; // Import Question1 component (optional for future use)\n\n    let chosenBook = \"\"; // Track chosen book for reference (optional)\n    let goNextButton = false;\n    let choiceMade = false;\n\n    const handleBookClick = (book) => {\n        chosenBook = book; // Store chosen book (optional)\n        choiceMade = true;\n    };\n\n    const goToQuestion= () => {\n        // No need to emit an event in this case\n        goNextButton = true;\n    };\n</script>\n    {#if !goNextButton}\n    <h2>Looks like Winnie-the-Pooh is the perfect fit! Which story catches your eye first?</h2>\n\n    <div>\n        <button class:selected={chosenBook === \"Winnie-The-Pooh (1926)\"} on:click={() => handleBookClick(\"Winnie-The-Pooh (1926)\")}>\n            Join Pooh on his first adventure in the original \"Winnie-the-Pooh\"!\n        </button>\n    </div>\n    <div>\n        <button class:selected={chosenBook === \"The Little Things in Life: Simple Reflections from the Hundred-Acre Wood\"} on:click={() => handleBookClick(\"The Little Things in Life: Simple Reflections from the Hundred-Acre Wood\")}>\n            Discover simple joys with Pooh in \"The Little Things in Life\".\n        </button>\n    </div>\n    <div>\n        <button class:selected={chosenBook === \"The World of Christopher Robin\"} on:click={() => handleBookClick(\"The World of Christopher Robin\")}>\n            Explore the world in \"The World of Christopher Robin\".\n        </button>\n    </div>\n    <div>\n        <button class:selected={chosenBook === \"The Pooh Dictionary\"} on:click={() => handleBookClick(\"The Pooh Dictionary: The Complete Guide to the Words of Pooh & All the Animals in the Forest\")}>\n            Learn the language of the Hundred Acre Wood with \"The Pooh Dictionary\".\n        </button>\n    </div>\n    <div>\n        <button class:selected={chosenBook === \"When We Were Very Young\"} on:click={() => handleBookClick(\"When We Were Very Young\")}>\n            Read poems about friendship and wonder in \"When We Were Very Young\".\n        </button>\n    </div>\n\n    {#if choiceMade && !goNextButton}\n        <button class=\"next\" on:click={goToQuestion}>Next</button>\n    {/if}\n    {/if}\n\n\n\n    {#if goNextButton}\n        <BookDetails bookTitle={chosenBook} />\n    {/if}\n\n\n    <style>\n        h2 {\n            font-size: 18px;\n        }\n        /* Same styles as provided previously */\n        button {\n            font-size: 14px;\n            padding: 8px 16px;\n            border: 5px solid brown;\n            border-radius: 10px;\n            margin: 5px;\n            cursor: pointer;\n            width: 250px;\n            background-color: darkgreen;\n            color: white;\n        }\n    \n        button.selected {\n            background-color: lightgreen;\n        }\n    \n        button.next {\n            background-color: lightgreen;\n            width: auto;\n        }\n    </style>","<script>\n    import BookDetails from './BookDetails.svelte'; // Import component for book details\n\n    let chosenBook = \"\"; // Track chosen book for reference (optional)\n    let goNextButton = false; // Flag for displaying book details\n    let animalTalesChoice = \"\"; // Track chosen animal tale category (optional)\n    let choiceMade = false;\n\n    const handleBookClick = (book) => {\n        chosenBook = book; // Store chosen book (optional)\n        choiceMade = true;\n\n    };\n\n    const goToNextQuestion = () => {\n        goNextButton = true; // Flag for displaying book details\n    };\n\n    const handleAnimalTaleChoice = (choice) => {\n        animalTalesChoice = choice;\n    };\n</script>\n\n{#if !goNextButton}\n\n    <h2>Based on your choices, it seems like animal tales are right for you! Here are some exciting books:</h2>\n\n        <div>\n            <button class:selected={chosenBook === \"Aesop’s Fables\"} on:click={() => handleBookClick(\"Aesop’s Fables\")}>\n                Learn timeless wisdom with Aesop's Fables!\n            </button>\n        </div>\n        <div>\n            <button class:selected={chosenBook === \"Tales From Beatrix Potter\"} on:click={() => handleBookClick(\"Tales From Beatrix Potter\")}>\n                Explore Beatrix Potter's charming animal tales!\n            </button>\n        </div>\n        <div>\n            <button class:selected={chosenBook === \"White Tail: King of the Forest\"} on:click={() => handleBookClick(\"White Tail: King of the Forest\")}>\n                Follow the journey of White Tail, the king of the forest!\n            </button>\n        </div>\n        <div>\n            <button class:selected={chosenBook === \"The Boy, The Mole, The Fox and The Horse\"} on:click={() => handleBookClick(\"The Boy, The Mole, The Fox and The Horse\")}>\n                Discover heartwarming friendship in \"The Boy, The Mole, The Fox and The Horse\".\n            </button>\n        </div>\n\n    {#if choiceMade && !goNextButton}\n        <button class=\"next\" on:click={goToNextQuestion}>Next</button>\n    {/if}\n\n\n    {/if}\n\n\n{#if goNextButton}\n<BookDetails bookTitle={chosenBook} />\n{/if}\n\n\n<style>\n    /* Same styles as provided previously */\n    h2 {\n        font-size: 18px;\n    }\n    button {\n        font-size: 15px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n\n","<script>\n    import WinnieThePoohChoice from './WinnieThePoohChoice.svelte';\n    import AnimalTalesChoice from './AnimalTalesChoice.svelte';\n\n    let selectedChoice = \"\";\n    let showNextButton = false;\n\n    // Combine 'choiceMade' and 'nextButtonClicked' into a single boolean for simplicity\n    let nextQuestionDisplayed = false;\n\n    const handleChoiceClick = (choiceType) => {\n        selectedChoice = choiceType;\n        nextQuestionDisplayed = false; // Reset to display the main question\n        showNextButton = true;\n    };\n\n    const goToNextQuestion = () => {\n        nextQuestionDisplayed = true;\n    };\n</script>\n\n{#if !nextQuestionDisplayed}\n    <h2>What kind of animal adventure would you like to have?</h2>\n\n    <div>\n        <button class:selected={selectedChoice === \"winnieThePooh1\"} on:click={() => handleChoiceClick(\"winnieThePooh1\")}>\n            Help a bear find some honey!\n        </button>\n    </div>\n    <div>\n        <button class:selected={selectedChoice === \"animalTales1\"} on:click={() => handleChoiceClick(\"animalTales1\")}>\n            Join a race with a tortoise and a hare!\n        </button>\n    </div>\n    <div>\n        <button class:selected={selectedChoice === \"animalTales\"} on:click={() => handleChoiceClick(\"animalTales\")}>\n            Outsmart a cunning fox in the forest!\n        </button>\n    </div>\n    <div>\n        <button class:selected={selectedChoice === \"winnieThePooh\"} on:click={() => handleChoiceClick(\"winnieThePooh\")}>\n            Sing songs with friends in the Hundred Acre Wood!\n        </button>\n    </div>\n\n    {#if showNextButton}\n    <button class=\"next\" on:click={goToNextQuestion}>Next</button>\n    {/if}\n\n{:else}\n    {#if selectedChoice === \"winnieThePooh\"}\n        <WinnieThePoohChoice />\n    {/if}\n    {#if selectedChoice === \"animalTales\"}\n        <AnimalTalesChoice />\n    {/if}\n    {#if selectedChoice === \"winnieThePooh1\"}\n        <WinnieThePoohChoice />\n    {/if}\n    {#if selectedChoice === \"animalTales1\"}\n        <AnimalTalesChoice />\n    {/if}\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n\n","<script>\n    import BookDetails from './BookDetails.svelte'; // Import component for book details\n\n    let chosenBook = \"\"; // Track chosen book for reference (optional)\n    let goNextButton = false; // Flag for displaying book details\n    let choiceMade = false;\n\n    const handleBookClick = (book) => {\n        chosenBook = book; // Store chosen book (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        goNextButton = true; // Flag for displaying book details\n    };\n</script>\n{#if !goNextButton}\n<h2>It seems like nursery rhymes is right for you! Which collection of rhymes would you like to explore?</h2>\n\n<div>\n    <button class:selected={chosenBook === \"Book of Nursery and Mother Goose Rhymes\"} on:click={() => handleBookClick(\"Book of Nursery and Mother Goose Rhymes\")}>\n        Discover classic rhymes from the \"Book of Nursery and Mother Goose Rhymes\".\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Nursery Friends From France\"} on:click={() => handleBookClick(\"Nursery Friends From France\")}>\n        Join the fun with \"Nursery Friends From France\"!\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"The Annotated Mother Goose\"} on:click={() => handleBookClick(\"The Annotated Mother Goose\")}>\n        Explore the rich history of rhymes with \"The Annotated Mother Goose\".\n    </button>\n</div>\n\n\n{#if choiceMade && !goNextButton}\n<button class=\"next\" on:click={goToNextQuestion}>Next</button>\n{/if}\n\n\n{/if}\n\n\n{#if goNextButton}\n<BookDetails bookTitle={chosenBook} />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    h2 {\n        font-size: 18px;\n    }\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n\n","<script>\n    import AnimalsPath from './AnimalsPath.svelte'; // Renamed WinnieThePoohPath to AnimalsPath\n    import NurseryRhymePath from './NurseryRhymePath.svelte';\n\n    let selectedPath = \"\"; // String to store the chosen path (\"animals\" or \"nurseryRhyme\")\n    let showNextButton = false; // Flag to control \"Next\" button visibility\n    let goNextButton = false;\n\n    const handlePathClick = (path) => {\n        selectedPath = path;\n        showNextButton = true;\n    };\n\n    const goToNextQuestion = () => {\n        // Emit event based on the chosen path (e.g., \"animals\", \"nurseryRhyme\")\n        goNextButton = true;\n    };\n</script>\n\n{#if !goNextButton}\n    <h2>Would you rather:</h2>\n    <div>\n        <button class:selected={selectedPath === \"animals\"} on:click={() => handlePathClick(\"animals\")}>\n            Have a picnic with a talking bear and his friends!\n        </button>\n    </div>\n    <div>\n        <button class:selected={selectedPath === \"nurseryRhyme\"} on:click={() => handlePathClick(\"nurseryRhyme\")}>\n            Skip rope with Humpty Dumpty (be careful not to knock him down!)\n        </button>\n    </div>\n\n    {#if showNextButton}\n    <button class=\"next\"  on:click={goToNextQuestion}>Next</button>\n    {/if}\n\n{/if}\n\n\n{#if goNextButton}\n    {#if selectedPath === \"animals\"}\n        <AnimalsPath />\n    {:else if selectedPath === \"nurseryRhyme\"}\n        <NurseryRhymePath />\n    {/if}\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    button {\n     font-size: 16px;\n     padding: 10px 20px;\n     border: 5px solid brown;\n     border-radius: 10px;\n     margin: 5px;\n     cursor: pointer;\n     width: 220px;\n     background-color: darkgreen;\n     color: white;\n   }\n   button.selected {\n        background-color: lightgreen;\n    }\n   button.next {\n     background-color: lightgreen;\n     width: auto;\n   }\n</style>\n","<script>\n    import BookDetails from './BookDetails.svelte'; // Import component for book details\n\n    let chosenBook = \"\"; // Track chosen book for reference (optional)\n    let goNextButton = false; // Flag for displaying book details\n    let choiceMade = false;\n\n    const handleBookClick = (book) => {\n        chosenBook = book; // Store chosen book (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        goNextButton = true; // Flag for displaying book details\n    };\n</script>\n\n{#if !goNextButton}\n\n<h2>Embark on a French story adventure! Choisissez un conte à explorer!:</h2>\n\n<div>\n    <button class:selected={chosenBook === \"Hansel et Gretel\"} on:click={() => handleBookClick(\"Hansel et Gretel\")}>\n        Hansel and Gretel (Hansel et Gretel)\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Jacques et le Haricot Magique\"} on:click={() => handleBookClick(\"Jacques et le Haricot Magique\")}>\n        Jack and the Beanstalk (Jacques et le Haricot Magique)\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Les Trois Petits Cochons\"} on:click={() => handleBookClick(\"Les Trois Petits Cochons\")}>\n        The Three Little Pigs (Les Trois Petits Cochons)\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Boucle d'Or et Les Trois Ours\"} on:click={() => handleBookClick(\"Boucle d'Or et Les Trois Ours\")}>\n        Goldilocks and the Three Bears (Boucle d'Or et Les Trois Ours)\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Le Petit Chaperon Rouge\"} on:click={() => handleBookClick(\"Le Petit Chaperon Rouge\")}>\n        Little Red Riding Hood (Le Petit Chaperon Rouge)\n    </button>\n</div>\n\n{#if choiceMade && !goNextButton}\n<button class=\"next\" on:click={goToNextQuestion}>Next</button>\n{/if}\n\n{/if}\n\n{#if goNextButton}\n<BookDetails bookTitle={chosenBook} />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    h2 {\n        font-size: 18px;\n    }\n    button {\n        font-size: 15px;\n        padding: 8px 16px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 240px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import BookDetails from './BookDetails.svelte'; // Import component for book details\n\n    let chosenBook = \"\"; // Track chosen book for reference (optional)\n    let goNextButton = false; // Flag for displaying book details\n    let choiceMade = false;\n\n    const handleBookClick = (book) => {\n        chosenBook = book; // Store chosen book (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        goNextButton = true; // Flag for displaying book details\n    };\n</script>\n{#if !goNextButton}\n<h2>Based on your choices, the Brothers Grimm seem like a great fit! Pick a story to learn more:</h2>\n\n<div>\n    <button class:selected={chosenBook === \"The Complete Brothers Grimm Fairy Tales\"} on:click={() => handleBookClick(\"The Complete Brothers Grimm Fairy Tales\")}>\n        The Complete Brothers Grimm Fairy Tales: Dive into a collection of classic tales, from Rapunzel and Cinderella to Hansel and Gretel.\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Snow White or The House In The Wood\"} on:click={() => handleBookClick(\"Snow White or The House In The Wood\")}>\n        Snow White or The House In The Wood: Discover the tale of a beautiful princess, a jealous stepmother, and seven dwarfs in this story.\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"The Sleeping Beauty\"} on:click={() => handleBookClick(\"The Sleeping Beauty\")}>\n        The Sleeping Beauty: Unravel the mystery of a princess cursed to sleep for a hundred years.\n    </button>\n</div>\n\n{#if choiceMade && !goNextButton}\n<button class=\"next\" on:click={goToNextQuestion}>Next</button>\n{/if}\n{/if}\n\n{#if goNextButton}\n<BookDetails bookTitle={chosenBook} />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    h2 {\n        font-size: 18px;\n    }\n    button {\n        font-size: 15px;\n        padding: 8px 16px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 240px; /* Adjust width for longer titles */\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import BookDetails from './BookDetails.svelte'; // Import component for book details\n\n    let chosenBook = \"\"; // Track chosen book for reference (optional)\n    let goNextButton = false; // Flag for displaying book details\n    let choiceMade = false;\n\n    const handleBookClick = (book) => {\n        chosenBook = book; // Store chosen book (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        goNextButton = true; // Flag for displaying book details\n    };\n</script>\n{#if !goNextButton}\n<h2>Based on your choices, Hans Christian Andersen seems like a great fit! Pick a story to learn more:</h2>\n\n<div>\n    <button class:selected={chosenBook === \"The Snow Queen\"} on:click={() => handleBookClick(\"The Snow Queen\")}>\n        The Snow Queen: Embark on a thrilling adventure with Gerda as she searches for her friend Kay, stolen by the Snow Queen to her icy palace.\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"The Complete Fairy Tales & Stories\"} on:click={() => handleBookClick(\"The Complete Fairy Tales & Stories\")}>\n        The Complete Fairy Tales & Stories (Hans Christian Andersen): Dive into a vast collection of Hans Christian Andersen's beloved tales, including The Little Mermaid, The Ugly Duckling, and The Emperor's New Clothes.\n    </button>\n</div>\n\n    {#if choiceMade && !goNextButton}\n    <button class=\"next\" on:click={goToNextQuestion}>Next</button>\n    {/if}\n{/if}\n\n{#if goNextButton}\n<BookDetails bookTitle={chosenBook} />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    h2 {\n        font-size: 18px;\n    }\n    button {\n        font-size: 15px;\n        padding: 8px 16px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 240px; /* Adjust width for longer titles */\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import GrimmFairyTales from './GrimmFairyTales.svelte';\n    import HansChristianAndersen from './HansChristianAndersen.svelte';\n\n    let selectedChoice = \"\";\n    let showNextButton = false; // Flag for displaying the Next button\n    let goNextButton = false;\n\n    const handleChoiceClick = (choiceType) => {\n        selectedChoice = choiceType;\n        showNextButton = true;\n    };\n    const goToNextQuestion = () => {\n        goNextButton = true; // Flag for displaying book details\n    };\n</script>\n    {#if !goNextButton}\n    <h2>Let's explore beyond the classics! Which story world would you like to visit?</h2>\n\n    <div>\n        <button class:selected={selectedChoice === \"grimmBrothers\"} on:click={() => handleChoiceClick(\"grimmBrothers\")}>\n            Help a brave princess outwit a cunning villain! \n        </button>\n    </div>\n    <div>\n        <button class:selected={selectedChoice === \"hca\"} on:click={() => handleChoiceClick(\"hca\")}>\n            Join a mermaid on her journey to the human world! \n        </button>\n    </div>\n    <div>\n        <button class:selected={selectedChoice === \"grimmFairyTale\"} on:click={() => handleChoiceClick(\"grimmFairyTale\")}>\n            Find a clever way to outsmart a sly fox! \n        </button>\n    </div>\n    <div>\n        <button class:selected={selectedChoice === \"hcaFairyTale\"} on:click={() => handleChoiceClick(\"hcaFairyTale\")}>\n            Make a wish with a magical flying trunk! \n        </button>\n    </div>\n\n    {#if showNextButton}\n        <button class=\"next\" on:click={() => goToNextQuestion()}>Next</button>\n    {/if}\n{:else}\n    {#if selectedChoice === \"grimmBrothers\"}\n        <GrimmFairyTales />\n    {/if}\n    {#if selectedChoice === \"hca\"}\n        <HansChristianAndersen />\n    {/if}\n    {#if selectedChoice === \"grimmFairyTale\"}\n        <GrimmFairyTales />\n    {/if}\n    {#if selectedChoice === \"hcaFairyTale\"}\n        <HansChristianAndersen />\n    {/if}\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    h2 {\n        font-size: 18px;\n    }\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import FrenchFairyTalesChoice from './FrenchFairyTalesChoice.svelte';\n    import OtherStoriesChoice from './OtherStoriesChoice.svelte';\n\n    let selectedChoice = \"\";\n    let showNextButton = false; // Flag for displaying the Next button\n    let nextQuestionDisplayed = false; // Flag for displaying the selected component\n    let goNextButton = false;\n\n    const handleChoiceClick = (choiceType) => {\n        selectedChoice = choiceType;\n        nextQuestionDisplayed = false; // Reset to display the main question\n        showNextButton = true;\n    };\n\n    const goToNextQuestion = () => {\n        nextQuestionDisplayed = true;\n        goNextButton = true;\n    };\n</script>\n\n{#if !goNextButton}\n\n<h2>Let's choose a story adventure!</h2>\n\n\n<div>\n    <button class:selected={selectedChoice === \"frenchFairyTales\"} on:click={() => handleChoiceClick(\"frenchFairyTales\")}>\n        Embark on a French story adventure filled with magic and brave heroes\n    </button>\n</div>\n<div>\n    <button class:selected={selectedChoice === \"otherStories\"} on:click={() => handleChoiceClick(\"otherStories\")}>\n        Explore a world of exciting adventures and timeless classics!\n    </button>\n</div>\n\n{#if showNextButton}\n    <button class=\"next\" on:click={goToNextQuestion}>Next</button>\n{/if}\n{/if}\n\n{#if nextQuestionDisplayed}\n    {#if selectedChoice === \"frenchFairyTales\"}\n        <FrenchFairyTalesChoice />\n    {:else}\n        <OtherStoriesChoice />\n    {/if}\n{/if}\n<style>\n    /* Same styles as provided previously */\n    button {\n     font-size: 16px;\n     padding: 10px 20px;\n     border: 5px solid brown;\n     border-radius: 10px;\n     margin: 5px;\n     cursor: pointer;\n     width: 220px;\n     background-color: darkgreen;\n     color: white;\n   }\n   button.selected {\n        background-color: lightgreen;\n    }\n   button.next {\n     background-color: lightgreen;\n     width: auto;\n   }\n</style>\n\n","<script>\n    import BookDetails from './BookDetails.svelte'; // Import component for book details\n\n    let chosenBook = \"\"; // Track chosen book for reference (optional)\n    let goNextButton = false; // Flag for displaying book details\n    let choiceMade = false;\n\n    const handleBookClick = (book) => {\n        chosenBook = book; // Store chosen book (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        goNextButton = true; // Flag for displaying book details\n    };\n</script>\n{#if !goNextButton}\n<h2>It looks like the  world of Children's Classics is right for you! Which story would you like to delve into?</h2>\n\n<div>\n    <button class:selected={chosenBook === \"Anne of Green Gables\"} on:click={() => handleBookClick(\"Anne of Green Gables\")}>\n        Meet a spirited redhead with a thirst for adventure in a small Canadian town.\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"The Little Prince\"} on:click={() => handleBookClick(\"The Little Prince\")}>\n        Join a tiny prince on a journey from his tiny asteroid to explore the universe.\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Pippi Longstocking\"} on:click={() => handleBookClick(\"Pippi Longstocking\")}>\n        Embark on wacky adventures with a strong, girl who lives with her horse and monkey. \n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Alice’s Adventures in Wonderland and Through the Looking-Glass\"} on:click={() => handleBookClick(\"Alice’s Adventures in Wonderland and Through the Looking-Glass\")}>\n        Fall down the rabbit hole with Alice and encounter a cast of quirky characters in Wonderland.\n    </button>\n</div>\n\n{#if choiceMade && !goNextButton}\n<button class=\"next\" on:click={goToNextQuestion}>Next</button>\n{/if}\n{/if}\n\n{#if goNextButton}\n<BookDetails bookTitle={chosenBook} />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    h2 {\n        font-size: 18px;\n    }\n    button {\n        font-size: 15px;\n        padding: 6px 16px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 240px; /* Adjust width for longer titles */\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import BookDetails from './BookDetails.svelte'; // Import component for book details\n\n    let chosenBook = \"\"; // Track chosen book for reference (optional)\n    let goNextButton = false; // Flag for displaying book details\n    let choiceMade = false;\n\n    const handleBookClick = (book) => {\n        chosenBook = book; // Store chosen book (optional)\n        choiceMade = true;\n    };\n\n    const goToNextQuestion = () => {\n        goNextButton = true; // Flag for displaying book details\n    };\n</script>\n{#if !goNextButton}\n<h2>It looks like the magical world of Disney is right for you! Which story will you pick?</h2>\n\n<div>\n    <button class:selected={chosenBook === \"Walt Disney’s Story Land 55 Favorite Stories\"} on:click={() => handleBookClick(\"Walt Disney’s Story Land 55 Favorite Stories\")}>\n        Explore a collection of 55 beloved Disney stories\n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Donald Duck Sees South America\"} on:click={() => handleBookClick(\"Donald Duck Sees South America\")}>\n        Join Donald Duck on a wacky adventure \n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Walt Disney’s Peter Pan\"} on:click={() => handleBookClick(\"Walt Disney’s Peter Pan\")}>\n        Never grow up with Peter Pan as he whisks Wendy and her brothers to Neverland \n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Mickey See The U.S.A.\"} on:click={() => handleBookClick(\"Mickey See The U.S.A.\")}>\n        Travel across the USA with Mickey Mouse as he explores iconic landmarks \n    </button>\n</div>\n<div>\n    <button class:selected={chosenBook === \"Everything I Need to Know I Learned From a Disney Little Golden Book\"} on:click={() => handleBookClick(\"Everything I Need to Know I Learned From a Disney Little Golden Book\")}>\n        Discover life lessons through the stories of Disney Little Golden Books\n    </button>\n</div>\n\n{#if choiceMade && !goNextButton}\n<button class=\"next\" on:click={goToNextQuestion}>Next</button>\n{/if}\n{/if}\n{#if goNextButton}\n<BookDetails bookTitle={chosenBook} />\n{/if}\n\n<style>\n    /* Same styles as provided previously */\n    h2 {\n        font-size: 18px;\n    }\n    button {\n        font-size: 15px;\n        padding: 6px 16px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 240px; /* Adjust width for longer titles */\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import ClassicStories from './ClassicStories.svelte'; // Import component for Classic Stories\n    import DisneyFavorites from './DisneyFavorites.svelte'; // Import component for Disney stories\n\n    let chosenPotion = \"\"; // Track chosen potion (optional)\n    let showNextButton = false; // Flag for displaying the Next button\n    let goNextButton = false;\n\n    const handlePotionClick = (potion) => {\n        chosenPotion = potion;\n        showNextButton = true;\n    };\n    const goToNextQuestion = () => {\n        goNextButton = true; // Flag for displaying book details\n    };\n</script>\n{#if !goNextButton}\n<h2>Uh oh! A bubbling cauldron awaits! Choose a potion to reveal your story world:</h2>\n\n<div>\n    <button class:selected={chosenPotion === \"classic\"} on:click={() => handlePotionClick(\"classic\")}>\n        The Golden Potion: Hints of timeless tales and enduring characters. Perhaps a journey down a rabbit hole or a mischievous puppet?\n    </button>\n</div>\n<div>\n    <button class:selected={chosenPotion === \"disney\"} on:click={() => handlePotionClick(\"disney\")}>\n        The Sapphire Potion: Sparkles with animation and a sprinkle of magic. Maybe a daring undersea adventure or a soaring flight with a magical friend?\n    </button>\n</div>\n\n{#if showNextButton}\n    <button class=\"next\" on:click={() => goToNextQuestion()}>Next</button>\n{/if}\n{/if}\n{#if goNextButton}\n    {#if chosenPotion === \"classic\"}\n        <ClassicStories />\n    {:else}\n        <DisneyFavorites />\n    {/if}\n{/if}\n<style>\n    /* Same styles as provided previously */\n    h2 {\n        font-size: 18px;\n    }\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<script>\n    import EnchantedForestChoice from './EnchantedForestChoice.svelte';\n    import BeyondTheRainbowChoice from './BeyondTheRainbowChoice.svelte';\n\n    let selectedChoice = \"\";\n    let showNextButton = false; // Flag for displaying the Next button\n    let nextQuestionDisplayed = false; // Flag for displaying the selected component\n\n    const handleChoiceClick = (choiceType) => {\n        selectedChoice = choiceType;\n        nextQuestionDisplayed = false; // Reset to display the main question\n        showNextButton = true;\n    };\n\n    const goToNextQuestion = () => {\n        nextQuestionDisplayed = true;\n    };\n</script>\n\n{#if !nextQuestionDisplayed}\n    <h2>Where does your imagination take you today?</h2>\n\n    <div>\n        <button class:selected={selectedChoice === \"enchantedForest\"} on:click={() => handleChoiceClick(\"enchantedForest\")}>\n            Into the Enchanted Forest\n        </button>\n    </div>\n    <div>\n        <button class:selected={selectedChoice === \"beyondTheRainbow\"} on:click={() => handleChoiceClick(\"beyondTheRainbow\")}>\n            Beyond the Rainbow\n        </button>\n    </div>\n\n    {#if showNextButton}\n        <button class=\"next\" on:click={goToNextQuestion}>Next</button>\n    {/if}\n\n{:else}\n    {#if selectedChoice === \"enchantedForest\"}\n        <EnchantedForestChoice />\n    {:else}\n        <BeyondTheRainbowChoice />\n    {/if}\n{/if}\n\n\n<style>\n    /* Same styles as provided previously */\n    button {\n     font-size: 16px;\n     padding: 10px 20px;\n     border: 5px solid brown;\n     border-radius: 10px;\n     margin: 5px;\n     cursor: pointer;\n     width: 220px;\n     background-color: darkgreen;\n     color: white;\n   }\n   button.selected {\n        background-color: lightgreen;\n    }\n   button.next {\n     background-color: lightgreen;\n     width: auto;\n   }\n</style>\n","<script>\n  import BookDetails from './BookDetails.svelte'; // Import component for book details\n\n  let chosenBook = \"\"; // Track chosen book for reference (optional)\n  let goNextButton = false; // Flag for displaying book details\n  let choiceMade = false;\n\n  const handleBookClick = (book) => {\n      chosenBook = book; // Store chosen book (optional)\n      choiceMade = true;\n  };\n\n  const goToNextQuestion = () => {\n      goNextButton = true; // Flag for displaying book details\n  };\n</script>\n{#if !goNextButton}\n<h2>It looks like you are ready to prepare for thrilling adventures! Which story will you embark on?</h2>\n\n<div>\n  <button class:selected={chosenBook === \"The Adventures of Robin Hood\"} on:click={() => handleBookClick(\"The Adventures of Robin Hood\")}>\n      Join the legendary Robin Hood and his Merry Men in their fight for justice \n  </button>\n</div>\n<div>\n  <button class:selected={chosenBook === \"The Two Jungle Books\"} on:click={() => handleBookClick(\"The Two Jungle Books\")}>\n      Swing through the jungle with Mowgli and encounter a cast of unforgettable animal\n  </button>\n</div>\n<div>\n  <button class:selected={chosenBook === \"Peter Pan\"} on:click={() => handleBookClick(\"Peter Pan\")}>\n      Fly away to Neverland with Peter Pan and the Lost Boys\n  </button>\n</div>\n<div>\n  <button class:selected={chosenBook === \"The Story of King Arthur and His Knights\"} on:click={() => handleBookClick(\"The Story of King Arthur and His Knights\")}>\n      Embark on a quest for honor and chivalry with King Arthur and his Knights of the Round Table\n  </button>\n</div>\n\n{#if choiceMade && !goNextButton}\n<button class=\"next\" on:click={goToNextQuestion}>Next</button>\n{/if}\n{/if}\n\n{#if goNextButton}\n<BookDetails bookTitle={chosenBook} />\n{/if}\n\n<style>\n  /* Same styles as provided previously */\n  h2 {\n      font-size: 17px;\n      \n  }\n  button {\n      font-size: 16px;\n      padding: 6px 15px;\n      border: 5px solid brown;\n      border-radius: 10px;\n      margin: 5px;\n      cursor: pointer;\n      width: 240px; /* Adjust width for longer titles */\n      background-color: darkgreen;\n      color: white;\n  }\n\n  button.selected {\n      background-color: lightgreen;\n  }\n\n  button.next {\n      background-color: lightgreen;\n      width: auto;\n  }\n</style>\n","<script>\n    import Question2a from './Question2a.svelte'; \n    import Question2b from './Question2b.svelte'; \n    import Question2c from './Question2c.svelte'; \n\n    let selectedAdventure = \"\"; \n    let showNextButton = false; \n    let goNextButton = false;\n\n    const handleAdventureClick = (adventureType) => {\n        selectedAdventure = adventureType;\n        showNextButton = true;\n    };\n\n    const goToNextQuestion = () => {\n        // Emit event based on selected adventure type\n        goNextButton = true;\n    };\n</script>\n\n{#if !goNextButton}\n    <h2>What kind of adventure would you most like to have?</h2>\n\n    <div>\n        <button class:selected={selectedAdventure === \"question2a\"} on:click={() => handleAdventureClick(\"question2a\")}>\n            A silly and lighthearted journey!\n        </button>\n    </div>\n    <div>\n        <button class:selected={selectedAdventure === \"question2b\"} on:click={() => handleAdventureClick(\"question2b\")}>\n            A magical quest with fantastical creatures!\n        </button>\n    </div>\n    <div>\n        <button class:selected={selectedAdventure === \"question2c\"} on:click={() => handleAdventureClick(\"question2c\")}>\n            An exciting exploration of a new world!\n        </button>\n    </div>\n\n    {#if showNextButton}\n    <button class=\"next\" on:click={goToNextQuestion}>Next</button>\n    {/if}\n\n    {/if}\n    {#if goNextButton}\n        {#if selectedAdventure === \"question2a\"}\n            <Question2a />\n        {:else if selectedAdventure === \"question2b\"}\n            <Question2b />\n        {:else if selectedAdventure === \"question2c\"}\n            <Question2c />\n        {/if}\n    {/if}\n\n<style>\n    button {\n        font-size: 16px;\n        padding: 10px 20px;\n        border: 5px solid brown;\n        border-radius: 10px;\n        margin: 5px;\n        cursor: pointer;\n        width: 220px;\n        background-color: darkgreen;\n        color: white;\n    }\n\n    button.selected {\n        background-color: lightgreen;\n    }\n\n    button.next {\n        background-color: lightgreen;\n        width: auto;\n    }\n</style>\n","<!-- App.svelte -->\n<script>\n    import { onMount } from 'svelte';\n    import Question1 from './Question1.svelte'; // Import each question component\n    import Question2 from './Question2.svelte';\n    import Question0 from './Question0.svelte';\n    // Import other question components here\n  \n    let currentQuestion = null;\n    let recommendations = [];\n  \n    // Function to toggle between questions\n    const toggleQuestion = () => {\n      // Switch to the next question component\n      if (currentQuestion === null) {\n        currentQuestion = Question0;\n      } else if (currentQuestion === Question1) {\n        currentQuestion = Question2;\n      } \n      // Add other cases for additional questions\n  \n      // If all questions are answered, calculate recommendations\n      if (currentQuestion === null) {\n        calculateRecommendations();\n      }\n    };\n  \n    // Function to calculate recommendations based on answers\n    const calculateRecommendations = () => {\n      // Add your logic to calculate recommendations based on answers\n      recommendations = []; // Dummy array for now\n    };\n  </script>\n  \n  <div class=\"container\">\n    {#if !currentQuestion}\n      <h1>Welcome to the Book Quiz!</h1>\n      <p>Answer the questions to find your next great read.</p>\n      <button on:click={toggleQuestion}>Start Quiz</button>\n    {:else}\n      <svelte:component this={currentQuestion} />\n    {/if}\n  </div>\n  \n  <style>\n    /* Add your CSS styles here */\n    .container {\n        position: absolute;\n        top: 100px; /* Adjust the top position as per your requirement */\n        left: calc((1536px - 500px) / 2 + 270px); /* Adjust the left position as per your requirement */\n        width: 270px; /* Increase width */\n        height: 550px; /* Increase height */\n        background-color: #FAEBD7; /* Set light brown background color */\n        border: 8px solid #8B4513; /* Set dark brown border */\n        padding: 20px;\n        border-radius: 15px;\n        /* overflow-y: auto; Enable scrolling if content overflows */\n        z-index: 1; /* Ensure the container is above other elements */\n        pointer-events: auto; /* Enable pointer events for the container */\n        text-align: center; /* Center text horizontally */\n        color: #8B4513; /* Set text color to dark brown */\n        font-family: Chalkboard, sans-serif; /* Set font to Chalkduster */\n    }\n  \n    h1 {\n      font-size: 24px;\n    }\n  \n    p {\n      font-size: 18px;\n      margin-bottom: 20px;\n    }\n  \n    button {\n      font-size: 18px;\n      padding: 10px 20px;\n      background-color: darkgreen;\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n    }\n  \n    button:hover {\n      background-color: green;\n    }\n  </style>\n  \n","import App from './App.svelte';\n\nconst app = new App({\n    target: document.body,\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","toggle_class","toggle","classList","construct_svelte_component","component","props","current_component","set_current_component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","length","update","e","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","d","create_component","mount_component","customElement","m","new_on_destroy","map","filter","on_destroy","destroy_component","detaching","filtered","targets","indexOf","flush_render_callbacks","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","splice","$set","$$props","obj","$$set","keys","if_block","create_if_block_2","button0","button1","button2","button3","h2","div0","div1","div2","div3","button","create_if_block_1","create_if_block","chosenAnswer","goNextButton","choiceMade","handleAnswerClick","answer","$$invalidate","disabled","button_disabled_value","create_if_block_3","if_block1","animalFriendsSelected","wiseTreeSelected","showNextButton","create_if_block_4","if_block0","forestSelected","kingdomSelected","librarySelected","div","bookTitle","location","click","t0_value","Title","Author","create_if_block_5","if_block2","Publisher","if_block3","Description","t0","location_changes","t1_value","t1","bookInfo","locationInfo","async","title","response","fetch","encodeURIComponent","ok","json","console","error","statusText","fetchBookDetails","fetchLocation","button4","div4","chosenBook","handleBookClick","book","selectedChoice","nextQuestionDisplayed","handleChoiceClick","choiceType","selectedPath","handlePathClick","path","goToNextQuestion","chosenPotion","handlePotionClick","potion","selectedAdventure","handleAdventureClick","adventureType","h1","currentQuestion","Question0","Question1","Question2","body"],"mappings":"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","x_google_ignoreList":[0]}